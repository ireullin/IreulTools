package IreulTools.collections;import IreulTools.functionalProgramming.IEachPair;import IreulTools.functionalProgramming.IEachPairUntilEnd;import IreulTools.functionalProgramming.ITap;import com.fasterxml.jackson.databind.ObjectMapper;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.Collection;import java.util.Map;import java.util.Set;import java.util.TreeMap;/** * Created by tech0039 on 2016/10/19. */public class SimpleMap implements ISimpleMap{    private static final Logger LOG = LoggerFactory.getLogger(SimpleMap.class);    private final Map<String, Object> map;    private SimpleMap(Map<String, Object> map){        this.map = map;    }    public static ISimpleMap create(){        return new SimpleMap(new TreeMap<String, Object>());    }    public static ISimpleMap create(Map<String, Object> otherMap){        return new SimpleMap(otherMap);    }    @Override    public ISimpleMap zip(Object[] keys, Object[] vals) throws Exception{        if(keys.length>vals.length) {            throw new Exception("length of param vals can't less than length of param keys, if doesn't assign default value.");        }        return this.zip(keys, vals, null);    }    @Override    public ISimpleMap zip(Object[] keys, Object[] vals, Object defaultVal){        for(int i=0; i< keys.length; i++){            if(i>=vals.length){                this.map.put(keys[i].toString(), defaultVal);            }            else {                this.map.put(keys[i].toString(), vals[i]);            }        }        return this;    }    @Override    public ISimpleMap mergeAndStayOld(Map<? extends String, ? extends Object> m) {        for( Map.Entry<? extends String, ? extends Object> e : m.entrySet()){            if(this.map.containsKey(e.getKey())){                continue;            }            else{                this.map.put(e.getKey(), e.getValue());            }        }        return this;    }    @Override    public ISimpleMap mergeAndStayNew(Map<? extends String, ? extends Object> m) {        this.map.putAll(m);        return this;    }    @Override    public int size() {        return this.map.size();    }    @Override    public boolean isEmpty() {        return this.map.isEmpty();    }    @Override    public boolean containsKey(Object key) {        return this.map.containsKey(key);    }    @Override    public boolean containsValue(Object value) {        return this.map.containsKey(value);    }    @Override    public IWrapper get(Object key) {        if(!containsKey(key))            return Wrapper.ofNull();        else            return Wrapper.of(this.map.get(key));    }    @Override    public ISimpleMap put(String key, Object value) {        this.map.put(key,value);        return this;    }    @Override    public ISimpleMap remove(Object key) {        this.map.remove(key);        return this;    }    @Override    public ISimpleMap putAll(Map<? extends String, ? extends Object> m) {        this.map.putAll(m);        return this;    }    @Override    public ISimpleMap clear() {        this.map.clear();        return this;    }    @Override    public Set<String> keySet() {        return this.map.keySet();    }    @Override    public Collection<Object> values() {        return this.map.values();    }    @Override    public Set<Map.Entry<String, Object>> entrySet() {        return this.map.entrySet();    }    @Override    public Map<String,Object> toMap(){        return this.map;    }    @Override    public ISimpleMap each(IEachPair<Boolean,String,IWrapper> f) throws Exception{        for(Map.Entry<String,Object> e : this.map.entrySet() ) {            boolean isCon = f.put(e.getKey(), Wrapper.of( e.getValue() ));            if(!isCon)                break;        }        return this;    }    @Override    public ISimpleMap eachUntilEnd(IEachPairUntilEnd<String, IWrapper> f) throws Exception{        return each((k,v) -> {            f.put(k,v);            return true;        });    }    @Override    public ISimpleMap tap(ITap<String> debugMsg) throws Exception{        debugMsg.put(this.toString());        return this;    }    @Override    public String toString() {        try {            ObjectMapper json = new ObjectMapper();            return json.writeValueAsString(this.map);        }        catch(Exception e){            return "";        }    }}